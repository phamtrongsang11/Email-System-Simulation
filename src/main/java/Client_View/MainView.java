/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Client_View;

import Client_Controller.ClientController;
import Model.Mail;
import Model.MailReceived;
import Model.ObjectWrapper;
import Model.User;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Font;
import java.awt.HeadlessException;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author phamt
 */
public class MainView extends javax.swing.JFrame {

    private ClientController myController;
    private User user;
    private ArrayList<Mail> mailList;
    private String domainName = "";

    /**
     * Creates new form UI
     */
    public MainView() {
        myController = new ClientController(this);
        mailList = new ArrayList<>();
        initComponents();
        customInit();
        this.disableInit();
        this.pack();
        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel10 = new javax.swing.JPanel();
        jSeparator2 = new javax.swing.JSeparator();
        btnCompose = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        pInbox = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        lbInbox = new javax.swing.JLabel();
        lbnInbox = new javax.swing.JLabel();
        pRead = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        lbRead = new javax.swing.JLabel();
        lbnRead = new javax.swing.JLabel();
        pSend = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        lbSend = new javax.swing.JLabel();
        lbnSend = new javax.swing.JLabel();
        pSpam = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        lbSpam = new javax.swing.JLabel();
        lbnSpam = new javax.swing.JLabel();
        pDelete = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        lbDelete = new javax.swing.JLabel();
        lbnDelete = new javax.swing.JLabel();
        pSchedule = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        lbSchedule = new javax.swing.JLabel();
        lbnSchedule = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jPanel5 = new javax.swing.JPanel();
        pInbox1 = new javax.swing.JPanel();
        btnSignin = new javax.swing.JButton();
        btnSignup = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jPanel17 = new javax.swing.JPanel();
        lbUser = new javax.swing.JLabel();
        btnLogout = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        btnReply = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSpam = new javax.swing.JButton();
        btnRecovery = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableMail = new javax.swing.JTable();
        jSeparator5 = new javax.swing.JSeparator();
        jPanel24 = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        lbTitleFrom = new javax.swing.JLabel();
        lbFrom = new javax.swing.JLabel();
        jPanel26 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        lbTime = new javax.swing.JLabel();
        jPanel23 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        lbTitleRep = new javax.swing.JLabel();
        lbRep = new javax.swing.JLabel();
        jPanel21 = new javax.swing.JPanel();
        lbTitleTo = new javax.swing.JLabel();
        lbTo = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        lbSubject = new javax.swing.JLabel();
        lbTitleFile = new javax.swing.JLabel();
        lbFile = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textContent = new javax.swing.JEditorPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Mail Client UI");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(34, 39, 54));
        jPanel1.setPreferredSize(new java.awt.Dimension(950, 700));

        jPanel2.setBackground(new java.awt.Color(51, 53, 71));
        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.Y_AXIS));

        jPanel9.setBackground(new java.awt.Color(51, 53, 71));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cloud_mail.png"))); // NOI18N
        jLabel1.setText("Mail");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.add(jPanel9);

        jPanel10.setBackground(new java.awt.Color(51, 53, 71));

        btnCompose.setBackground(new java.awt.Color(98, 110, 212));
        btnCompose.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnCompose.setForeground(new java.awt.Color(255, 255, 255));
        btnCompose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/composing_mail.png"))); // NOI18N
        btnCompose.setText("New Mail");
        btnCompose.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCompose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComposeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(btnCompose)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(btnCompose)
                .addGap(21, 21, 21)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.add(jPanel10);

        jPanel3.setBackground(new java.awt.Color(51, 53, 71));
        jPanel3.setPreferredSize(new java.awt.Dimension(131, 350));
        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.Y_AXIS));

        pInbox.setBackground(new java.awt.Color(51, 53, 71));
        pInbox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        pInbox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pInboxMouseClicked(evt);
            }
        });
        pInbox.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 5));

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/mailbox.png"))); // NOI18N
        pInbox.add(jLabel4);

        lbInbox.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lbInbox.setForeground(new java.awt.Color(255, 255, 255));
        lbInbox.setText("INBOX");
        pInbox.add(lbInbox);

        lbnInbox.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        lbnInbox.setForeground(new java.awt.Color(255, 255, 255));
        pInbox.add(lbnInbox);

        jPanel3.add(pInbox);

        pRead.setBackground(new java.awt.Color(51, 53, 71));
        pRead.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        pRead.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pReadMouseClicked(evt);
            }
        });
        pRead.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 5));

        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/mail_read.png"))); // NOI18N
        pRead.add(jLabel11);

        lbRead.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lbRead.setForeground(new java.awt.Color(255, 255, 255));
        lbRead.setText("READ");
        pRead.add(lbRead);

        lbnRead.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        lbnRead.setForeground(new java.awt.Color(255, 255, 255));
        pRead.add(lbnRead);

        jPanel3.add(pRead);

        pSend.setBackground(new java.awt.Color(51, 53, 71));
        pSend.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        pSend.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pSendMouseClicked(evt);
            }
        });
        pSend.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 5));

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/mail_send.png"))); // NOI18N
        pSend.add(jLabel6);

        lbSend.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lbSend.setForeground(new java.awt.Color(255, 255, 255));
        lbSend.setText("SENT");
        lbSend.setPreferredSize(new java.awt.Dimension(40, 20));
        pSend.add(lbSend);

        lbnSend.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        lbnSend.setForeground(new java.awt.Color(255, 255, 255));
        pSend.add(lbnSend);

        jPanel3.add(pSend);

        pSpam.setBackground(new java.awt.Color(51, 53, 71));
        pSpam.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        pSpam.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pSpamMouseClicked(evt);
            }
        });
        pSpam.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 5));

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/spam.png"))); // NOI18N
        pSpam.add(jLabel5);

        lbSpam.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lbSpam.setForeground(new java.awt.Color(255, 255, 255));
        lbSpam.setText("SPAMED");
        pSpam.add(lbSpam);

        lbnSpam.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        lbnSpam.setForeground(new java.awt.Color(255, 255, 255));
        pSpam.add(lbnSpam);

        jPanel3.add(pSpam);

        pDelete.setBackground(new java.awt.Color(51, 53, 71));
        pDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        pDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pDeleteMouseClicked(evt);
            }
        });
        pDelete.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 5));

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/trash.png"))); // NOI18N
        pDelete.add(jLabel2);

        lbDelete.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lbDelete.setForeground(new java.awt.Color(255, 255, 255));
        lbDelete.setText("DELETED");
        pDelete.add(lbDelete);

        lbnDelete.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        lbnDelete.setForeground(new java.awt.Color(255, 255, 255));
        pDelete.add(lbnDelete);

        jPanel3.add(pDelete);

        pSchedule.setBackground(new java.awt.Color(51, 53, 71));
        pSchedule.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        pSchedule.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pScheduleMouseClicked(evt);
            }
        });
        pSchedule.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 5));

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/schedule.png"))); // NOI18N
        pSchedule.add(jLabel3);

        lbSchedule.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lbSchedule.setForeground(new java.awt.Color(255, 255, 255));
        lbSchedule.setText("SCHEDULED");
        pSchedule.add(lbSchedule);

        lbnSchedule.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        lbnSchedule.setForeground(new java.awt.Color(255, 255, 255));
        pSchedule.add(lbnSchedule);

        jPanel3.add(pSchedule);

        jPanel2.add(jPanel3);
        jPanel2.add(jSeparator4);

        jPanel5.setBackground(new java.awt.Color(51, 53, 71));
        jPanel5.setPreferredSize(new java.awt.Dimension(197, 250));

        pInbox1.setBackground(new java.awt.Color(51, 53, 71));
        pInbox1.setPreferredSize(new java.awt.Dimension(196, 50));
        pInbox1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 20));

        btnSignin.setBackground(new java.awt.Color(98, 110, 212));
        btnSignin.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        btnSignin.setForeground(new java.awt.Color(255, 255, 255));
        btnSignin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-login-rounded-20.png"))); // NOI18N
        btnSignin.setText("SIGNIN");
        btnSignin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSignin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSigninActionPerformed(evt);
            }
        });
        pInbox1.add(btnSignin);

        btnSignup.setBackground(new java.awt.Color(98, 110, 212));
        btnSignup.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        btnSignup.setForeground(new java.awt.Color(255, 255, 255));
        btnSignup.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-signin-20.png"))); // NOI18N
        btnSignup.setText("SIGNUP");
        btnSignup.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSignup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSignupActionPerformed(evt);
            }
        });
        pInbox1.add(btnSignup);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pInbox1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(pInbox1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 88, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel5);

        jPanel14.setBackground(new java.awt.Color(34, 39, 54));
        jPanel14.setPreferredSize(new java.awt.Dimension(735, 793));
        jPanel14.setLayout(new javax.swing.BoxLayout(jPanel14, javax.swing.BoxLayout.Y_AXIS));

        jPanel18.setBackground(new java.awt.Color(23, 49, 74));
        jPanel18.setLayout(new javax.swing.BoxLayout(jPanel18, javax.swing.BoxLayout.Y_AXIS));

        jPanel4.setBackground(new java.awt.Color(34, 39, 54));
        jPanel4.setLayout(new java.awt.GridLayout(1, 0, 40, 0));

        jPanel11.setBackground(new java.awt.Color(34, 39, 54));
        jPanel11.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));

        jTextField1.setPreferredSize(new java.awt.Dimension(220, 30));
        jPanel11.add(jTextField1);

        btnSearch.setBackground(new java.awt.Color(98, 110, 212));
        btnSearch.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search_bar.png"))); // NOI18N
        btnSearch.setText("Search");
        btnSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSearch.setPreferredSize(new java.awt.Dimension(110, 30));
        jPanel11.add(btnSearch);

        jPanel4.add(jPanel11);

        jPanel17.setBackground(new java.awt.Color(34, 39, 54));
        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        lbUser.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbUser.setForeground(new java.awt.Color(255, 255, 255));
        lbUser.setPreferredSize(new java.awt.Dimension(100, 20));
        jPanel17.add(lbUser);

        btnLogout.setBackground(new java.awt.Color(98, 110, 212));
        btnLogout.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        btnLogout.setForeground(new java.awt.Color(255, 255, 255));
        btnLogout.setText("Logout");
        btnLogout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });
        jPanel17.add(btnLogout);

        jPanel4.add(jPanel17);

        jPanel18.add(jPanel4);

        jPanel15.setBackground(new java.awt.Color(42, 48, 66));
        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true), "Action", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N

        btnReply.setBackground(new java.awt.Color(98, 110, 212));
        btnReply.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        btnReply.setForeground(new java.awt.Color(255, 255, 255));
        btnReply.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reply.png"))); // NOI18N
        btnReply.setText("Reply");
        btnReply.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnReply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReplyActionPerformed(evt);
            }
        });
        jPanel15.add(btnReply);

        btnDelete.setBackground(new java.awt.Color(98, 110, 212));
        btnDelete.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/trash.png"))); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        jPanel15.add(btnDelete);

        btnSpam.setBackground(new java.awt.Color(98, 110, 212));
        btnSpam.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        btnSpam.setForeground(new java.awt.Color(255, 255, 255));
        btnSpam.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/spam.png"))); // NOI18N
        btnSpam.setText("Spam");
        btnSpam.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSpam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSpamActionPerformed(evt);
            }
        });
        jPanel15.add(btnSpam);

        btnRecovery.setBackground(new java.awt.Color(98, 110, 212));
        btnRecovery.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        btnRecovery.setForeground(new java.awt.Color(255, 255, 255));
        btnRecovery.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/recover.png"))); // NOI18N
        btnRecovery.setText("Recovery");
        btnRecovery.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRecovery.setPreferredSize(new java.awt.Dimension(140, 43));
        btnRecovery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecoveryActionPerformed(evt);
            }
        });
        jPanel15.add(btnRecovery);

        jPanel18.add(jPanel15);

        tableMail.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tableMail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "From", "Subject", "Date", "Rep"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableMail.setFillsViewportHeight(true);
        tableMail.setGridColor(new java.awt.Color(0, 117, 217));
        tableMail.setRowHeight(30);
        tableMail.setSelectionBackground(new java.awt.Color(0, 117, 217));
        tableMail.setSelectionForeground(new java.awt.Color(255, 255, 255));
        tableMail.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tableMail.setShowGrid(true);
        tableMail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMailMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableMail);

        jPanel18.add(jScrollPane1);

        jPanel14.add(jPanel18);

        jSeparator5.setForeground(new java.awt.Color(34, 39, 54));
        jSeparator5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel14.add(jSeparator5);

        jPanel24.setBackground(new java.awt.Color(255, 255, 255));
        jPanel24.setPreferredSize(new java.awt.Dimension(785, 420));
        jPanel24.setLayout(new javax.swing.BoxLayout(jPanel24, javax.swing.BoxLayout.Y_AXIS));

        jPanel25.setBackground(new java.awt.Color(255, 255, 255));
        jPanel25.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel25.setPreferredSize(new java.awt.Dimension(746, 30));
        jPanel25.setLayout(new java.awt.GridLayout(1, 0));

        jPanel22.setBackground(new java.awt.Color(255, 255, 255));
        jPanel22.setForeground(new java.awt.Color(255, 255, 255));
        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 5));

        lbTitleFrom.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lbTitleFrom.setText("FORM:");
        jPanel22.add(lbTitleFrom);

        lbFrom.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel22.add(lbFrom);

        jPanel25.add(jPanel22);

        jPanel26.setBackground(new java.awt.Color(255, 255, 255));
        jPanel26.setForeground(new java.awt.Color(255, 255, 255));
        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 5));

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel16.setText("TIME:");
        jPanel26.add(jLabel16);

        lbTime.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel26.add(lbTime);

        jPanel25.add(jPanel26);

        jPanel24.add(jPanel25);

        jPanel23.setBackground(new java.awt.Color(255, 255, 255));
        jPanel23.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(98, 110, 212), 1, true));
        jPanel23.setAutoscrolls(true);
        jPanel23.setPreferredSize(new java.awt.Dimension(138, 30));
        jPanel23.setLayout(new java.awt.GridLayout(1, 0));

        jPanel20.setBackground(new java.awt.Color(255, 255, 255));
        jPanel20.setForeground(new java.awt.Color(255, 255, 255));
        jPanel20.setAutoscrolls(true);
        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 5));

        lbTitleRep.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lbTitleRep.setText("REPLIES:");
        jPanel20.add(lbTitleRep);

        lbRep.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel20.add(lbRep);

        jPanel23.add(jPanel20);

        jPanel21.setBackground(new java.awt.Color(255, 255, 255));
        jPanel21.setForeground(new java.awt.Color(255, 255, 255));
        jPanel21.setAutoscrolls(true);
        jPanel21.setPreferredSize(new java.awt.Dimension(67, 35));
        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 5));

        lbTitleTo.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lbTitleTo.setText("ALSO TO:");
        jPanel21.add(lbTitleTo);

        lbTo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel21.add(lbTo);

        jPanel23.add(jPanel21);

        jPanel24.add(jPanel23);

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setPreferredSize(new java.awt.Dimension(117, 250));

        lbSubject.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lbSubject.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbSubject.setText("SUBJECT");

        lbTitleFile.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lbTitleFile.setText("FILE:");

        lbFile.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbFile.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lbFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbFileMouseClicked(evt);
            }
        });

        textContent.setEditable(false);
        textContent.setBackground(new java.awt.Color(255, 255, 255));
        textContent.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jScrollPane2.setViewportView(textContent);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbSubject, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 785, Short.MAX_VALUE)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(lbTitleFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbFile)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbSubject)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbTitleFile)
                    .addComponent(lbFile))
                .addContainerGap())
        );

        jPanel24.add(jPanel6);

        jPanel14.add(jPanel24);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
            .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 994, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSigninActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSigninActionPerformed
        for (ObjectWrapper func : myController.getActiveUI()) {
            if (func.getData() instanceof SignInForm signInForm) {
                signInForm.setVisible(true);
                return;
            }
        }
        SignInForm login = new SignInForm(myController, this, domainName);
        login.setVisible(true);
        myController.getActiveUI().add(new ObjectWrapper(ObjectWrapper.REPLY_SIGNIN_USER, (Object) login));
    }//GEN-LAST:event_btnSigninActionPerformed

    private void btnSignupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSignupActionPerformed
        for (ObjectWrapper func : myController.getActiveUI()) {
            if (func.getData() instanceof SignUpForm signUpForm) {
                signUpForm.setVisible(true);
                return;
            }
        }
        SignUpForm register = new SignUpForm(myController, this, domainName);
        register.setVisible(true);
        myController.getActiveUI().add(new ObjectWrapper(ObjectWrapper.REPLY_SIGNUP_USER, (Object) register));
    }//GEN-LAST:event_btnSignupActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (myController != null) {

            myController.sendData(new ObjectWrapper(ObjectWrapper.SIGNOUT, user));
            myController.sendData(new ObjectWrapper(ObjectWrapper.USER_EXIT, ""));

            if (myController.closeConnection()) {

                System.exit(0);
            }
        }

    }//GEN-LAST:event_formWindowClosing

    private void btnComposeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComposeActionPerformed
        for (ObjectWrapper func : myController.getActiveUI()) {
            if (func.getData() instanceof SendMailForm) {
                ((SendMailForm) func.getData()).setVisible(true);
                return;
            }
        }
        SendMailForm sendMail = new SendMailForm(myController, this, domainName);
        sendMail.setVisible(true);
        myController.getActiveUI().add(new ObjectWrapper(ObjectWrapper.REPLY_SEND_MAIL, (Object) sendMail));
    }//GEN-LAST:event_btnComposeActionPerformed

    private void pInboxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pInboxMouseClicked
        if (user == null || user.getId() == 0) {
            JOptionPane.showMessageDialog(this, "Please sign in first!!!");
        } else {
            myController.sendData(new ObjectWrapper(ObjectWrapper.INBOX_LIST, user));
            myController.sendData(new ObjectWrapper(ObjectWrapper.CHECK_STORAGE, user));
            setBackgroundActive(pInbox);
        }
    }//GEN-LAST:event_pInboxMouseClicked

    private void pSendMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pSendMouseClicked
        if (user == null || user.getId() == 0) {
            JOptionPane.showMessageDialog(this, "Please sign in first!!!");
        } else {
            myController.sendData(new ObjectWrapper(ObjectWrapper.SEND_LIST, user));
            setBackgroundActive(pSend);
        }
    }//GEN-LAST:event_pSendMouseClicked

    private void pReadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pReadMouseClicked
        if (user == null || user.getId() == 0) {
            JOptionPane.showMessageDialog(this, "Please sign in first!!!");
        } else {
            myController.sendData(new ObjectWrapper(ObjectWrapper.READ_LIST, user));
            setBackgroundActive(pRead);
        }
    }//GEN-LAST:event_pReadMouseClicked

    private void pDeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pDeleteMouseClicked
        if (user == null || user.getId() == 0) {
            JOptionPane.showMessageDialog(this, "Please sign in first!!!");
        } else {
            myController.sendData(new ObjectWrapper(ObjectWrapper.DELETE_LIST, user));
            setBackgroundActive(pDelete);
        }
    }//GEN-LAST:event_pDeleteMouseClicked

    private void pSpamMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pSpamMouseClicked
        if (user == null || user.getId() == 0) {
            JOptionPane.showMessageDialog(this, "Please sign in first!!!");
        } else {
            myController.sendData(new ObjectWrapper(ObjectWrapper.SPAM_LIST, user));
            setBackgroundActive(pSpam);
        }
    }//GEN-LAST:event_pSpamMouseClicked

    private void pScheduleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pScheduleMouseClicked
        if (user == null || user.getId() == 0) {
            JOptionPane.showMessageDialog(this, "Please sign in first!!!");
        } else {
            myController.sendData(new ObjectWrapper(ObjectWrapper.SCHEDULE_LIST, user));
            setBackgroundActive(pSchedule);
        }
    }//GEN-LAST:event_pScheduleMouseClicked

    private void tableMailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMailMouseClicked
        int i = tableMail.getSelectedRow();
        if (i >= 0) {
            //            int id = Integer.parseInt(tableMail.getModel().getValueAt(i, 1).toString());
            lbTitleFrom.setText(tableMail.getModel().getColumnName(1) + ":");
            lbFrom.setText(tableMail.getModel().getValueAt(i, 1).toString());
            lbTime.setText(tableMail.getModel().getValueAt(i, 3).toString());
            lbSubject.setText(tableMail.getModel().getValueAt(i, 2).toString());
            lbFile.setText(mailList.get(i).getFile());

//            System.out.println(mailList.get(i).getFile());
//            String content = tableMail.getModel().getValueAt(i, 3).toString();
            textContent.setContentType("text/html");
            textContent.setText(mailList.get(i).getContent());

//             textContent.setText("<html><i>Hello world</i></html>");
            if (mailList.get(i).getStatus() != null && mailList.get(i).getStatus().getId() == ObjectWrapper.INBOX_LIST) {

                ArrayList<MailReceived> recList = new ArrayList<>();
                recList.add(new MailReceived(this.user));
                mailList.get(i).setToUser(recList);

                myController.sendData(new ObjectWrapper(ObjectWrapper.UPDATE_TO_READ_LIST, mailList.get(i)));
            }

            if (mailList.get(i).isIsCC()) {
                myController.sendData(new ObjectWrapper(ObjectWrapper.GET_TO_USER, mailList.get(i)));
            } else {
                lbTo.setText("");
            }

            if (!mailList.get(i).getRepList().isEmpty()) {
                String repTo = "";
                for (Mail m : mailList.get(i).getRepList()) {
                    repTo += m.getTitle() + ", ";
                }

                repTo = repTo.substring(0, repTo.length() - 2);
                lbRep.setText(repTo);
            } else {
                lbRep.setText("");
            }

        }
    }//GEN-LAST:event_tableMailMouseClicked

    private void btnRecoveryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecoveryActionPerformed
        int i = tableMail.getSelectedRow();
        if (i != -1) {
            if (mailList.get(i).getStatus() != null && mailList.get(i).getStatus().getId() != ObjectWrapper.READ_LIST) {
                int choice = JOptionPane.showConfirmDialog(this, "Are you sure want to recovery it", "Confirm Dialog", JOptionPane.YES_NO_OPTION);

                if (choice == JOptionPane.YES_OPTION) {
                    ArrayList<MailReceived> recList = new ArrayList<>();
                    recList.add(new MailReceived(this.user));
                    mailList.get(i).setToUser(recList);
                    
                    myController.sendData(new ObjectWrapper(ObjectWrapper.UPDATE_TO_READ_LIST, mailList.get(i)));

                }

            } else {
                JOptionPane.showMessageDialog(this, "This action only perform in spam or delete list mail");
            }

        } else {
            JOptionPane.showMessageDialog(this, "Please choose mail you want to perform action!!!");
        }
    }//GEN-LAST:event_btnRecoveryActionPerformed

    private void btnSpamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSpamActionPerformed
        int i = tableMail.getSelectedRow();
        if (i != -1) {
            if (mailList.get(i).getStatus() != null && mailList.get(i).getStatus().getId() == ObjectWrapper.READ_LIST) {
                int choice = JOptionPane.showConfirmDialog(this, "Are you sure want to spam it", "Confirm Dialog", JOptionPane.YES_NO_OPTION);

                if (choice == JOptionPane.YES_OPTION) {
                    ArrayList<MailReceived> recList = new ArrayList<>();
                    recList.add(new MailReceived(this.user));

                    mailList.get(i).setToUser(recList);
                    myController.sendData(new ObjectWrapper(ObjectWrapper.UPDATE_TO_SPAM_LIST, mailList.get(i)));

                }

            } else {
                JOptionPane.showMessageDialog(this, "This action only perform in read list mail");
            }

        } else {
            JOptionPane.showMessageDialog(this, "Please choose mail you want to perform action!!!");
        }
    }//GEN-LAST:event_btnSpamActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int i = tableMail.getSelectedRow();
        if (i != -1) {
            if (mailList.get(i).getStatus() != null && (mailList.get(i).getStatus().getId() == ObjectWrapper.READ_LIST || mailList.get(i).getStatus().getId() == ObjectWrapper.SCHEDULE_LIST || mailList.get(i).getStatus().getId() == ObjectWrapper.DELETE_LIST)) {

                int choice = JOptionPane.showConfirmDialog(this, "Are you sure want to delete it", "Confirm Dialog", JOptionPane.YES_NO_OPTION);
                if (choice == JOptionPane.YES_OPTION) {
                    switch (mailList.get(i).getStatus().getId()) {
                        case ObjectWrapper.SCHEDULE_LIST ->
                            myController.sendData(new ObjectWrapper(ObjectWrapper.DELETE_SCHEDULE, mailList.get(i)));

                        case ObjectWrapper.DELETE_LIST ->
                            myController.sendData(new ObjectWrapper(ObjectWrapper.DELETE_MAIL, mailList.get(i)));

                        default -> {
                            ArrayList<MailReceived> recList = new ArrayList<>();
                            recList.add(new MailReceived(this.user));

                            mailList.get(i).setToUser(recList);
                            myController.sendData(new ObjectWrapper(ObjectWrapper.UPDATE_TO_DELETE_LIST, mailList.get(i)));
                        }
                    }

                }

            } else {
                JOptionPane.showMessageDialog(this, "This action only perform in read list mail");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please choose mail you want to perform action!!!");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnReplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReplyActionPerformed

        ArrayList<Mail> replies = new ArrayList<>();
        if (tableMail.getSelectedRows().length > 0) {
            int[] rows = tableMail.getSelectedRows();

            for (int i = 0; i < rows.length; i++) {

                if (mailList.get(rows[i]).getStatus() == null) {
                    JOptionPane.showMessageDialog(this, "You cannot replies yourself!!!");
                    return;
                }
                replies.add(mailList.get(rows[i]));
            }
            System.out.println(replies);

            for (ObjectWrapper func : myController.getActiveUI()) {
                if (func.getData() instanceof SendMailForm sendMailForm) {
                    sendMailForm.setVisible(true);
                    sendMailForm.setReplies(replies);
                    sendMailForm.initReplies();
                    return;
                }
            }

            SendMailForm sendMail = new SendMailForm(myController, replies, this, domainName);
            sendMail.setVisible(true);
            myController.getActiveUI().add(new ObjectWrapper(ObjectWrapper.REPLY_SEND_MAIL, (Object) sendMail));
        } else {
            JOptionPane.showMessageDialog(this, "Please choose record first!!!");
        }
    }//GEN-LAST:event_btnReplyActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        this.user = null;
        myController.sendData(new ObjectWrapper(ObjectWrapper.SIGNOUT, user));
        myController.getActiveUI().clear();
        logout();
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void lbFileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbFileMouseClicked
        StringTokenizer st = new StringTokenizer(lbFrom.getText(), "@");
        String name = st.nextToken();
        myController.sendData(new ObjectWrapper(ObjectWrapper.INIT_RECEIVED_FILE, name + ";" + lbFile.getText()));
    }//GEN-LAST:event_lbFileMouseClicked

    public void saveFile() throws IOException {
//        File saveFile = myController.receiveFile(folder, lbFile.getText());
//        Desktop.getDesktop().open(saveFile);

        try {
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new java.io.File("."));
            chooser.setDialogTitle("Choose directory");
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

            if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {

                String path = chooser.getSelectedFile().getAbsolutePath();
                File saveFile = myController.ft.clientReceiveFile(path, lbFile.getText());
//                myController.sendData(new ObjectWrapper(ObjectWrapper.INBOX_LIST, this.user));
                Desktop.getDesktop().open(saveFile);

            } else {
                System.out.println("No Selection ");
            }
        } catch (HeadlessException | IOException ex) {
            System.err.println(ex);
        }
    }

    public void setDomainName(ObjectWrapper data) {
        if (!data.getData().equals("fail") && data.getData() instanceof String) {
            domainName = data.getData().toString();
        } else {
            JOptionPane.showMessageDialog(this, "Fail to get domain name");
        }
    }

//    public void setShedule(String subject,String content){
//        tasknew = new TimerTask() {
//                public void run() {
//                    System.out.println("timer working hihi " + new Date());
//                    Mail mail = new Mail(subject,content,view.getUser(),toList);
//                    mySocket.sendData(new ObjectWrapper(ObjectWrapper.SEND_MAIL, mail));
//                }
//            };
//        timer = new Timer();
//    }
    public void schedule(ObjectWrapper data) {
        if (!data.getData().equals("fail")) {
            JOptionPane.showMessageDialog(this, "Send mail complete");
        } else {
            JOptionPane.showMessageDialog(this, "Send mail fail");
        }
    }

    public void listMail(ObjectWrapper data) {
        if (!data.getData().equals("empty") && data.getData() instanceof ArrayList<?>) {
            mailList.clear();
            System.out.println("here");
            mailList = (ArrayList<Mail>) data.getData();
            if (!mailList.isEmpty()) {
                if (mailList.get(0).getFormUser() == null) {
                    this.setSendMailListToTable();
                } else {
                    setValueToTable();
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "You don't have any mail yet");
        }
    }

    public void listSchedule(ObjectWrapper data) {
        if (!data.getData().equals("empty") && data.getData() instanceof ArrayList<?>) {
            mailList.clear();
            mailList = (ArrayList<Mail>) data.getData();
            this.setScheduleLListToTable();
        } else {
            JOptionPane.showMessageDialog(this, "You don't have any mail yet");
        }
    }

    public DefaultTableModel initTableModel(DefaultTableModel model, String[] name) {
        Vector header = new Vector();
        for (String s : name) {
            header.add(s);
        }
        model = new DefaultTableModel(header, 0);
        return model;
    }

    public void setSendMailListToTable() {

        model = this.initTableModel(model, headerTableSendMail);
        for (int i = 0; i < mailList.size(); i++) {
            Vector row = new Vector();
            row.add(mailList.get(i).getId());

            String toUser = "";
            for (MailReceived rec : mailList.get(i).getToUser()) {
                toUser += rec.getReceiver().getEmail() + ", ";
            }

            if (toUser.length() > 0) {
                toUser = toUser.substring(0, toUser.length() - 2);
            }

            row.add(toUser);
            row.add(mailList.get(i).getTitle());
            row.add(mailList.get(i).getTime());

            String replies = "";
            for (Mail mail : mailList.get(i).getRepList()) {
                replies += mail.getTitle() + ", ";
            }

            if (replies.length() > 0) {
                replies = replies.substring(0, replies.length() - 2);
            }

            row.add(replies);
            model.addRow(row);
        }
        tableMail.setModel(model);
        setColumnWidth(tableMail, widthHeaderList);

    }

    public void setValueToTable() {

        model = this.initTableModel(model, headerTable);

        for (int i = 0; i < mailList.size(); i++) {
            Vector row = new Vector();
            row.add(mailList.get(i).getId());
            row.add(mailList.get(i).getFormUser().getEmail());
            row.add(mailList.get(i).getTitle());
            row.add(mailList.get(i).getTime());

            String replies = "";
            for (Mail mail : mailList.get(i).getRepList()) {
                replies += mail.getTitle() + ", ";
            }

            if (replies.length() > 0) {
                replies = replies.substring(0, replies.length() - 2);
            }

            System.out.println(mailList.get(i).getSize().toString());
            row.add(replies);
            model.addRow(row);

        }
        tableMail.setModel(model);
        setColumnWidth(tableMail, widthHeaderList);
    }

    public void setScheduleLListToTable() {

        model = this.initTableModel(model, headerSchedule);
        for (int i = 0; i < mailList.size(); i++) {
            Vector row = new Vector();
            row.add(mailList.get(i).getId());

            String toUser = "";
            for (MailReceived rec : mailList.get(i).getToUser()) {
                toUser += rec.getReceiver().getEmail() + ", ";
            }

            if (toUser.length() > 0) {
                toUser = toUser.substring(0, toUser.length() - 2);
            }

            row.add(toUser);
            row.add(mailList.get(i).getTitle());
            row.add(mailList.get(i).getTime());
            row.add(mailList.get(i).getSchedule());
            model.addRow(row);
        }
        tableMail.setModel(model);
        setColumnWidth(tableMail, widthHeaderList);

    }

    public void setColumnWidth(JTable tbl, int[] width) {
        tbl.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        TableColumnModel columnModel = tbl.getColumnModel();
        for (int i = 0; i < width.length; i++) {
            if (i < columnModel.getColumnCount()) {
                columnModel.getColumn(i).setMaxWidth(width[i]);
            } else {
                break;
            }
        }
        tbl.getTableHeader().setFont(new Font("SansSerif", Font.BOLD, 14));

    }

    public void displayTotalMail(ObjectWrapper data) {

        if (!data.getData().equals("empty") && data.getData() instanceof ArrayList<?>) {
            ArrayList<Integer> total = (ArrayList<Integer>) data.getData();

            mailList = (ArrayList<Mail>) data.getData();

            lbnInbox.setText(total.get(0).toString());
            lbnRead.setText(total.get(1).toString());
            lbnSpam.setText(total.get(2).toString());
            lbnDelete.setText(total.get(3).toString());
            lbnSchedule.setText(total.get(4).toString());
            lbnSend.setText(total.get(5).toString());

        } else {
            JOptionPane.showMessageDialog(this, "You don't have any mail");
        }
    }

    public void displayToUser(ObjectWrapper data) {
        if (!data.getData().equals("empty") && data.getData() instanceof ArrayList<?>) {
            ArrayList<User> toList = (ArrayList<User>) data.getData();
            String to = "";
            for (User u : toList) {
                if (!u.getEmail().equals(this.user.getEmail())) {
                    to += u.getEmail() + ", ";
                }
            }
            to = to.substring(0, to.length() - 2);
            lbTo.setText(to);

        } else {
            JOptionPane.showMessageDialog(this, "Error");
        }
    }

    public void deleteSchedule(ObjectWrapper data) {
        if (!data.getData().equals("false")) {
            myController.sendData(new ObjectWrapper(ObjectWrapper.SCHEDULE_LIST, user));
            JOptionPane.showMessageDialog(this, "Delete schedule success");

        } else {
            JOptionPane.showMessageDialog(this, "Delete schedule false");
        }
    }

    public void deleteMail(ObjectWrapper data) {
        if (!data.getData().equals("false")) {
            myController.sendData(new ObjectWrapper(ObjectWrapper.DELETE_LIST, user));
            JOptionPane.showMessageDialog(this, "Delete mail success");

        } else {
            JOptionPane.showMessageDialog(this, "Delete mail false");
        }
    }

    public void checkStorage(ObjectWrapper data) {
        if (data.getData().equals("isFull")) {
            JOptionPane.showMessageDialog(this, "Your inbox had been full!!!");
        }
    }

    public void IsFull(ObjectWrapper data) {
        User u = (User) data.getData();
        JOptionPane.showMessageDialog(this, u.getEmail() + "'s inbox had been full!!!");
    }

//    public void close(Object data){
//        boolean result = (boolean) data;
//        System.out.println("here");
//        if(result){
//            if(myController.closeConnection()){
//                System.out.println("Exit success");
//            }
//            
//        }
//        else{
//            JOptionPane.showMessageDialog(this, "Error appeared when use try to close");
//        }
//    }
    public void getDomainName() {
        myController.sendData(new ObjectWrapper(ObjectWrapper.GET_DOMAIN_NAME, ""));
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
        lbUser.setText(user.getFirstName() + " " + user.getLastName());
        //System.out.println(user);
    }

    public void showMessage(String s) {
        JOptionPane.showMessageDialog(this, s);

    }

    public void logout() {

        disableInit();
        clearActive();
        btnSignin.setEnabled(true);
        btnSignup.setEnabled(true);

        lbnInbox.setText("");
        lbnRead.setText("");
        lbnSend.setText("");
        lbnSpam.setText("");
        lbnDelete.setText("");
        lbnSchedule.setText("");
        lbUser.setText("");
        lbRep.setText("");
        lbTo.setText("");
        lbSubject.setText("Subject Mail");
        textContent.setText("Content");

        this.user = null;
        model = this.initTableModel(model, headerTable);
        tableMail.setModel(model);
    }

    public void disableInit() {
        this.btnCompose.setEnabled(false);
        this.btnDelete.setEnabled(false);
        this.btnSpam.setEnabled(false);
        this.btnLogout.setEnabled(false);
        this.btnReply.setEnabled(false);
        this.btnSearch.setEnabled(false);
        this.btnRecovery.setEnabled(false);
    }

    public void enableFunctionLoginSuccess() {
        this.btnCompose.setEnabled(true);
        this.btnDelete.setEnabled(true);
        this.btnSpam.setEnabled(true);
        this.btnLogout.setEnabled(true);
        this.btnReply.setEnabled(true);
        this.btnSearch.setEnabled(true);
        this.btnRecovery.setEnabled(true);
        this.btnSignin.setEnabled(false);
        this.btnSignup.setEnabled(false);

    }

    public void customInit() {
        getDomainName();
        
        jpanelList.add(pInbox);
        jpanelList.add(pSend);
        jpanelList.add(pRead);
        jpanelList.add(pSpam);
        jpanelList.add(pDelete);
        jpanelList.add(pSchedule);
    }

    public void setBackgroundActive(javax.swing.JPanel p) {
        p.setBackground(active);
        for (javax.swing.JPanel panel : jpanelList) {
            if (!panel.equals(p)) {
                panel.setBackground(inActive);
            }
        }
    }

    public void clearActive() {
        for (javax.swing.JPanel panel : jpanelList) {
            panel.setBackground(inActive);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCompose;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnRecovery;
    private javax.swing.JButton btnReply;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSignin;
    private javax.swing.JButton btnSignup;
    private javax.swing.JButton btnSpam;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lbDelete;
    private javax.swing.JLabel lbFile;
    private javax.swing.JLabel lbFrom;
    private javax.swing.JLabel lbInbox;
    private javax.swing.JLabel lbRead;
    private javax.swing.JLabel lbRep;
    private javax.swing.JLabel lbSchedule;
    private javax.swing.JLabel lbSend;
    private javax.swing.JLabel lbSpam;
    private javax.swing.JLabel lbSubject;
    private javax.swing.JLabel lbTime;
    private javax.swing.JLabel lbTitleFile;
    private javax.swing.JLabel lbTitleFrom;
    private javax.swing.JLabel lbTitleRep;
    private javax.swing.JLabel lbTitleTo;
    private javax.swing.JLabel lbTo;
    private javax.swing.JLabel lbUser;
    private javax.swing.JLabel lbnDelete;
    private javax.swing.JLabel lbnInbox;
    private javax.swing.JLabel lbnRead;
    private javax.swing.JLabel lbnSchedule;
    private javax.swing.JLabel lbnSend;
    private javax.swing.JLabel lbnSpam;
    private javax.swing.JPanel pDelete;
    private javax.swing.JPanel pInbox;
    private javax.swing.JPanel pInbox1;
    private javax.swing.JPanel pRead;
    private javax.swing.JPanel pSchedule;
    private javax.swing.JPanel pSend;
    private javax.swing.JPanel pSpam;
    private javax.swing.JTable tableMail;
    private javax.swing.JEditorPane textContent;
    // End of variables declaration//GEN-END:variables
    private DefaultTableModel model = new DefaultTableModel();
    private int[] widthHeaderList = {50, 200, 250, 150, 150, 250};
    private String[] headerTable = {"ID", "From", "Subject", "Time", "Rep"};
    private String[] headerTableSendMail = {"ID", "To", "Subject", "Time", "Rep"};
    private String[] headerSchedule = {"ID", "To", "Subject", "Created At", "Schedule"};
    private ArrayList<javax.swing.JPanel> jpanelList = new ArrayList<>();
    private Color active = new Color(0, 117, 217);

    private Color inActive = new Color(51, 53, 71);
}
